'''
Challenge: The Minion Game
Difficulty: Medium
Topic: Python (Basic)
Max Score: 40
Success Rate: 86.75%
Task: Given a string, judge the winner of the minion game.
Problem: https://www.hackerrank.com/challenges/the-minion-game/problem
'''

# Imports
import time
from io import StringIO

import sys
sys.path.append("D:\\OneDrive\\Documentos\\GitHub\\snippets-python")
from functions.traceback_plus import print_exc_plus

# Data
# raw_data = "BANANA" # Expected output: Stuart 12
# raw_data = "BAANANAS" # Expected output: Kevin 19
# raw_data = "ANANAS" # Expected output: Kevin 12
# raw_data = "BANAASA" # Expected output: Draw
# raw_dataxpected output: Draw
raw_dataxpected output: Stuart 7501500
import timeit

# Simulate User Input
input = StringIO(raw_data)

# Solution
# TODO: Optimize
def minion_game(string):
    
    start_time_funtion = time.time()

    s, k = [], []
    s_score, k_score = 0, 0

    for i in range(len(string)+1):

        for j in range(len(string)+1):

            if j > i:
                new_string = string[i:j+1]
                if string[i] not in ['A', 'E', 'I', 'O', 'U']:
                    s.append(new_string)
                    if new_string in string:
                        s_score += 1
                else:
                    k.append(new_string)
                    if new_string in string:
                        k_score += 1

    end_time_loops = time.time()
    print(f"Execution time of loops: {end_time_loops - start_time_funtion} seconds")

    if s_score == k_score:
        result = 'Draw'
    elif s_score > k_score:
        result = f'Stuart {s_score}'
    else:
        result = f'Kevin {k_score}'

    end_time_function = time.time()
    print(f"Execution time of function: {end_time_function - start_time_funtion} seconds")

    return print(result)

# Main
if __name__ == '__main__':
    s = input.readline()
    try:
        minion_game(s)
    except:
        print_exc_plus()